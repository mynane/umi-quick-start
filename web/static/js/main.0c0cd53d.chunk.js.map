{"version":3,"sources":["components/Layout/index.js","utils/autoInterface.js","components/TypesContent/index.js","App.js","serviceWorker.js","index.js"],"names":["props","children","className","toHump","name","str","arr","split","toUpperCase","join","titleCase","replace","all","letter","options","mode","theme","lineNumbers","useState","value","setValue","json","setJson","title","setTitle","des","setDes","copied","setCopied","changeTypeContent","types","suffix","message","data","isHide","result1","names","parse","temp","console","log","cutRepeate","item","n","res","values","d","Object","keys","map","current","count","format","isfirst","isArray","Array","r","type","i","length","cur","JSON","stringify","push","autoInterface","useEffect","placeholder","onChange","e","target","style","position","editor","val","jsn","onBeforeChange","text","onCopy","setTimeout","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.0c0cd53d.chunk.js","sourcesContent":["import React from \"react\";\nimport \"./index.css\";\n\nexport default (props) => {\n  const { children } = props;\n  return <div className=\"layout\">{children}</div>;\n};\n","const { NODE_ENV } = process.env;\n\nexport const titleCase = (str) => {\n  // 请把你的代码写在这里\n  var arr = str.split(\"\");\n  arr[0] = arr[0].toUpperCase();\n  var str1 = arr.join(\"\");\n  return str1;\n};\n\n// 下划线转换驼峰\nexport const toHump = (name) => {\n  return titleCase(\n    name.replace(/_([a-z])/g, function (all, letter) {\n      return letter.toUpperCase();\n    })\n  );\n};\n\nexport default (suffix, message, data, isHide) => {\n  if (isHide) {\n    return;\n  }\n  const result1 = [];\n  const names = {};\n  parse(data, suffix, true);\n\n  function cutRepeate({ item, n, res, names, d }) {\n    const values = Object.keys(item).map((map) => {\n      return typeof map;\n    });\n    const keys = Object.keys(item);\n    const temp = `${keys.join(\"\")}-${values.join(\"\")}`;\n    const current = names[`${suffix}${n}`];\n    if (current) {\n      if (current.temp === temp) {\n        current.count += 1;\n      } else {\n        current.count += 1;\n        parse(item, `${suffix}${n}${current.count}`);\n        return `${suffix}${n}${current.count}`;\n      }\n    } else {\n      parse(item, `${suffix}${n}`);\n      names[`${suffix}${n}`] = {\n        count: 1,\n        temp,\n      };\n    }\n  }\n\n  function format(data, name, isfirst, isArray) {\n    let res = {};\n    for (let d in data) {\n      const item = data[d];\n      if (item === null) {\n        res[d] = null;\n      } else if (typeof item === \"function\") {\n        res[d] = \"() => void\";\n      } else if (item instanceof Array) {\n        if (item[0] instanceof Object) {\n          const n = toHump(d);\n          const r = cutRepeate({ item: item[0], n, res, names, d });\n          res[d] = r ? `${r}[]` : `${suffix}${n}[]`;\n        } else {\n          let type = null;\n          for (let i = 0; i < item.length; i++) {\n            const cur = item[i];\n            if (!type) {\n              type = typeof cur;\n            }\n            if (type === typeof cur) {\n              continue;\n            } else {\n              type = null;\n              break;\n            }\n          }\n          res[d] = `${type ? type : \"any\"}[]`;\n        }\n      } else if (item instanceof Object) {\n        const n = toHump(d);\n        const r = cutRepeate({\n          item,\n          n,\n          res,\n          names,\n          d,\n        });\n        res[d] = r ? r : `${suffix}${n}`;\n      } else {\n        res[d] = typeof item;\n      }\n    }\n    result1[result1.length] = `export${\n      isfirst ? \" default\" : \"\"\n    } interface ${name} ${JSON.stringify(res)}${isArray ? \"[]\" : \"\"}`\n      .replace(/\\{/g, \"{\\n\\t\")\n      .replace(/\\}/g, \"\\n}\")\n      .replace(/\\\"/g, \"\")\n      .replace(/\\:/g, \"?:\")\n      .replace(/\\,/g, \",\\n\\t\");\n    return res;\n  }\n\n  function parse(data, name, isfirst) {\n    if (data instanceof Array) {\n      if (data[0] instanceof Object) {\n        format(data[0], name, isfirst, true);\n      } else {\n        let type = null;\n        for (let i = 0; i < data.length; i++) {\n          const cur = data[i];\n          if (!type) {\n            type = typeof cur;\n          }\n          if (type === typeof cur) {\n            continue;\n          } else {\n            type = null;\n            break;\n          }\n        }\n        result1.push(\n          `export${isfirst ? \" default\" : \"\"} interface ${name} ${\n            type ? type : \"any\"\n          }[]`\n        );\n      }\n      return;\n    }\n\n    format(data, name, isfirst);\n  }\n  const temp = `// ${suffix}${message}\\n\\n${result1.join(\"\\n\")}`;\n  // tslint:disable-next-line:no-console\n  console.log(temp);\n  return temp;\n};\n","import React, { useState, useEffect } from \"react\";\nimport { UnControlled as CodeMirror } from \"react-codemirror2\";\n\nimport { Controlled as CodeMirror2 } from \"react-codemirror2\";\n\nimport { CopyToClipboard } from \"react-copy-to-clipboard\";\n\nimport \"./index.css\";\nimport \"codemirror/lib/codemirror.css\";\nimport \"codemirror/theme/material.css\";\nimport autoInterface from \"../../utils/autoInterface\";\n\n// require(\"codemirror/mode/json/json\")\n// require(\"codemirror/mode/javascript/javascript\");\n\nconst options = {\n  mode: \"json\",\n  theme: \"material\",\n  lineNumbers: true,\n};\n\nexport default (props) => {\n  const [value, setValue] = useState(\"\");\n  const [json, setJson] = useState(\"\");\n  const [title, setTitle] = useState(\"\");\n  const [des, setDes] = useState(\"\");\n  const [copied, setCopied] = useState(false);\n\n  function changeTypeContent() {\n    if (!json) {\n      return;\n    }\n    const types = autoInterface(title, des, json, false);\n    setValue(types);\n  }\n\n  useEffect(() => {\n    changeTypeContent();\n    return () => {};\n  }, [json, title, des]);\n  return (\n    <div className=\"grid-container typesContent\">\n      <div className=\"row row_input\">\n        <div className=\"col_6\">\n          <input\n            placeholder=\"请输入类型名\"\n            value={title}\n            onChange={(e) => {\n              setTitle(e.target.value);\n            }}\n          />\n        </div>\n        <div className=\"col_6\">\n          <input\n            placeholder=\"请输入类描述\"\n            value={des}\n            onChange={(e) => {\n              setDes(e.target.value);\n            }}\n          />\n        </div>\n      </div>\n      <div className=\"row row_content\">\n        <div className=\"col_6 col_left\" style={{ position: \"relative\" }}>\n          <CodeMirror\n            options={options}\n            onChange={(editor, data, val) => {\n              try {\n                const jsn = JSON.parse(val);\n                setJson(jsn);\n              } catch (e) {\n                // console.log(e);\n              }\n            }}\n          />\n          {/* <span className=\"copy_content\" onClick={() => changeTypeContent()}>\n            生成\n          </span> */}\n        </div>\n        <div className=\"col_6 col_right\">\n          <CodeMirror2\n            value={value}\n            options={options}\n            onBeforeChange={(editor, data, val) => {\n              setValue(value);\n            }}\n            onChange={(editor, data, val) => {}}\n          />\n          <CopyToClipboard\n            text={value}\n            onCopy={() => {\n              setCopied(true);\n              setTimeout(() => {\n                setCopied(false);\n              }, 3000);\n            }}\n          >\n            <span className=\"copy_content\">{copied ? \"已复制\" : \"复制\"}</span>\n          </CopyToClipboard>\n        </div>\n      </div>\n    </div>\n  );\n};\n","import React from \"react\";\nimport Layout from \"./components/Layout\";\nimport TypesContent from \"./components/TypesContent\";\n\nimport \"./reset.css\";\nimport \"./index.css\";\nimport \"./grid.css\";\n\nexport default () => (\n  <Layout>\n    <TypesContent></TypesContent>\n  </Layout>\n);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}